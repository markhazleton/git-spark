name: Publish to NPM

on:
    release:
        types: [published]

jobs:
    publish:
        name: Publish Package
        runs-on: ubuntu-latest

        permissions:
            contents: read
            id-token: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  registry-url: "https://registry.npmjs.org"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm run test:coverage

            - name: Run linting
              run: npm run lint

            - name: Build project
              run: npm run build

            - name: Verify package contents
              run: |
                  npm pack --dry-run
                  npx publint

            - name: Publish to NPM
              run: npm publish --provenance
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: Create GitHub deployment
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: release } = await github.rest.repos.getReleaseByTag({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag: context.ref.replace('refs/tags/', '')
                      });

                      await github.rest.repos.createDeployment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: context.sha,
                        environment: 'npm',
                        description: `Deployed version ${release.tag_name} to NPM`,
                        auto_merge: false
                      });

    notify:
        name: Notify Success
        runs-on: ubuntu-latest
        needs: publish
        if: success()

        steps:
            - name: Extract version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Notify Discord (if webhook configured)
              if: vars.DISCORD_WEBHOOK_URL
              run: |
                  curl -H "Content-Type: application/json" \
                       -d "{\"content\":\"üöÄ Git Spark v${{ steps.version.outputs.VERSION }} has been published to NPM!\\n\\nhttps://www.npmjs.com/package/git-spark\"}" \
                       ${{ vars.DISCORD_WEBHOOK_URL }}

    rollback:
        name: Rollback on Failure
        runs-on: ubuntu-latest
        needs: publish
        if: failure()

        steps:
            - name: Extract version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20.x"
                  registry-url: "https://registry.npmjs.org"

            - name: Unpublish failed release (within 24 hours)
              run: |
                  echo "‚ö†Ô∏è Publication failed for version ${{ steps.version.outputs.VERSION }}"
                  echo "Manual intervention may be required to unpublish if needed"
                  echo "Run: npm unpublish git-spark@${{ steps.version.outputs.VERSION }}"
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
